name: Coverity Project Pipeline

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project Name'
        required: true
      project_description:
        description: 'Project Description'
        required: true
      stream_name:
        description: 'Comma-separated Stream Names (e.g., stream-1,stream-2)'
        required: true
      stream_description:
        description: 'Comma-separated Stream Descriptions (e.g., desc-1,desc-2)'
        required: true
      component_map_name:
        description: 'Comma-separated Component Map Names (e.g., map-1,map-2)'
        required: true
      component_map_description:
        description: 'Comma-separated Component Map Descriptions (e.g., desc-1,desc-2)'
        required: true
      role_name:
        description: 'Select a Project Role'
        required: true
        type: choice
        options:
          - componentMapOwner
          - componentMapViewer
          - hierarchyAdmin
          - icUser
          - noAccess
          - projectOwner
          - reporter
          - streamOwner
          - sysAdmin
          - triageStoreOwner
          - visitor
          - committer
          - Committer-Eaton
          - developer
          - Eaton Developer
          - Eaton Project Owner
          - observer
          - projectAdmin
          - serverAdmin
          - streamAdmin
          - wsReporter
      assignee_username:
        description: 'Project Assignee Username (required)'
        required: true
      scope:
        description: 'Scope'
        required: true

jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    env:
      COVERITY_USERNAME: ${{ secrets.COVERITY_USERNAME }}
      COVERITY_API_KEY: ${{ secrets.COVERITY_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests

      - name: Create Component Maps
        run: |
          IFS=',' read -ra MAPS <<< "${{ github.event.inputs.component_map_name }}"
          IFS=',' read -ra DESCRIPTIONS <<< "${{ github.event.inputs.component_map_description }}"
          for i in "${!MAPS[@]}"; do
            map="${MAPS[$i]}"
            description="${DESCRIPTIONS[$i]}"
            echo "Creating component map: $map with description: $description"
            python scripts/create_component_map.py \
              --name "$map" \
              --description "$description" \
              --username "$COVERITY_USERNAME" \
              --apikey "$COVERITY_API_KEY"
          done

      - name: Create Project
        run: |
          python scripts/create_project.py \
            --name "${{ github.event.inputs.project_name }}" \
            --description "${{ github.event.inputs.project_description }}" \
            --username "$COVERITY_USERNAME" \
            --apikey "$COVERITY_API_KEY"

      - name: Assign Role to Project User
        run: |
          python scripts/update_role.py \
            --project "${{ github.event.inputs.project_name }}" \
            --role "${{ github.event.inputs.role_name }}" \
            --username "$COVERITY_USERNAME" \
            --apikey "$COVERITY_API_KEY" \
            --assignee "${{ github.event.inputs.assignee_username }}" \
            --scope "${{ github.event.inputs.scope }}"

      - name: Create Streams
        run: |
          IFS=',' read -ra STREAMS <<< "${{ github.event.inputs.stream_name }}"
          IFS=',' read -ra DESCRIPTIONS <<< "${{ github.event.inputs.stream_description }}"
          for i in "${!STREAMS[@]}"; do
            stream="${STREAMS[$i]}"
            description="${DESCRIPTIONS[$i]}"
            echo "Creating stream: $stream with description: $description"
            python scripts/create_stream.py \
              --name "$stream" \
              --description "$description" \
              --project "${{ github.event.inputs.project_name }}" \
              --username "$COVERITY_USERNAME" \
              --apikey "$COVERITY_API_KEY"
          done
